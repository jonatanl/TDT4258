import json
import sys

# Bitfield used to designate pitch of a note:
# 0 = A, 1 = A#,  2 = H, 3 = C, 4 = C#, 5 = D, 6 = D#, 7 = E, 8 = F, 9 = F#, 10 = G, 11 = G#
noteToNumber = {'A': 0, 'Ax': 1, 'H': 2, 'C': 3, 'Cx': 4, 'D': 5, 'Dx': 6, 'E': 7, 'F': 8, 'Fx': 9, 'G': 10, 'Gx': 11}

# 16 bit with the following structure:
# note = 4;
# octave = 4;
# amplitude = 3;
# duration = 5;

# number is an int value
# but return value is in bit as a string
def decimalToBin(number):
	return bin(number)[2:]

# takes in binary number as a string and returns hex number as a string
def binToHex(number):
	return hex(int(number, 2))

# Each part has a given number of bits. The number will not generate correct number of 0's in front.
# Fill missing 0's at the beginning.
def fillBitsIfMissing(number, numberOfBits):
	while numberOfBits > len(number):
		number = '0' + number
	return number

def noteToBin(note):
	binaryNumber = decimalToBin(noteToNumber[note])
	binaryNumber = fillBitsIfMissing(binaryNumber, 4)
	return binaryNumber

def octaveToBin(octave):
	binaryNumber = decimalToBin(octave)
	binaryNumber = fillBitsIfMissing(binaryNumber, 4)
	return binaryNumber

def amplitudeToBin(amplitude):
	binaryNumber = decimalToBin(amplitude)
	binaryNumber = fillBitsIfMissing(binaryNumber, 3)
	return binaryNumber

def durationToBin(duration):
	binaryNumber = decimalToBin(duration)
	binaryNumber = fillBitsIfMissing(binaryNumber, 5)
	return binaryNumber

def writeHexArrayToFile(outfile, hexArray, partName):
	size = len(hexArray)
	
	outfile.write('uint16_t ' + partName + '_notes[' + str(size) + '] = {')
	
	for hexNumber in hexArray:
		outfile.write(hexNumber + ',')
	
	outfile.write('}; \n')

def writePartToFile(songName, partName, partNumber, part, outfile):
	writeHexArrayToFile(outfile, part, partName)
	outfile.write('synth_part ' + partName + ' = { ')
	outfile.write('.start = (synth_note*) &' + partName + '_notes[0], ')
	outfile.write('.n_notes = ' + str(len(part)) + ', ')
	outfile.write('.channel = ' + str(partNumber) + ' };\n')


def writeSongToFile(songName, durationUnit, part0, part1, outfile):
	
	# Write song name in comments
	outfile.write('//-------------------------------\n')
	outfile.write('// ' + songName + '\n')
	outfile.write('//-------------------------------\n')

	# Write code declaring part 0
	writePartToFile(songName, songName + '_part0', 0, part0, outfile) 
	outfile.write('\n')
	
	# Write code declaring part 1
	writePartToFile(songName, songName + '_part1', 1, part1, outfile) 
	outfile.write('\n')

	# Write declarations to make song globally available
	outfile.write('extern synth_song ' + songName + '; \n')
	outfile.write('synth_song ' + songName + ' = { ')
	outfile.write('.default_duration_unit = ' + str(durationUnit) + ', ')
	outfile.write('.part0 = &' + songName + '_part0, ')
	outfile.write('.part1 = &' + songName + '_part1 };\n')
	outfile.write('\n')

def createHexArray(note, octave, amplitude, duration):
	songArray = []
	size = len(note)

	for i in xrange(size):
		binaryNumber = ''
		
		# Append all bits
		binaryNumber += durationToBin(duration[i])
		binaryNumber += amplitudeToBin(amplitude[i])
		binaryNumber += octaveToBin(octave[i])
		binaryNumber += noteToBin(note[i])

		# Convert to hex
		hexNumber = binToHex(binaryNumber)

		songArray.append(hexNumber)

	return songArray

def jsonPartToHexArray(part):
  note      = part["note"]
  octave    = part["octave"]
  amplitude = part["amplitude"]
  duration  = part["duration"]
  return createHexArray(note, octave, amplitude, duration)

def main():
	
	# Write include statements to output header
	outfile = open('synthSongs.c', 'w')
	outfile.write('#include <stdint.h> \n')
	outfile.write('#include "synth.h" \n')
	outfile.write('\n')

	# Write a file comment
	outfile.write('// AUTOMATICALLY GENERATED SOURCE: \n')
	outfile.write('// This file was automatically generated by the python script "' + sys.argv[0] + '".\n')
	outfile.write('\n')
	
	# Read songs from files specified by input arguments, and write songs to the song header.
	for i in range(1, len(sys.argv)):
		
		# Read and decode next json song file
		f = open(sys.argv[i], 'r')
		song = json.loads(f.read())
		f.close()
		
		# Get values from json song 
		songName = song["songName"]
		durationUnit = song["durationUnit"]
		part0 = jsonPartToHexArray(song["part0"])
		part1 = jsonPartToHexArray(song["part1"])

		# Write song file
		writeSongToFile(songName, durationUnit, part0, part1, outfile)

	outfile.close()

main()
